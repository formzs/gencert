name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release Artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true


      - name: Build all targets
        shell: bash
        run: |
          bash scripts/build.sh

      - name: Ensure zip is available
        shell: bash
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y zip
          fi

      - name: Package archives (zip/tar.gz)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist tmp
          # Windows zip (normalize inner name to gencert.exe)
          for f in bin/gencert-windows-*.exe; do
            [ -f "$f" ] || continue
            arch=$(basename "$f" | sed -E 's/^gencert-windows-([^.]+)\.exe$/\1/')
            rm -f tmp/gencert.exe
            cp "$f" tmp/gencert.exe
            (cd tmp && zip -9 "../dist/gencert-windows-${arch}.zip" gencert.exe)
          done
          # Linux tar.gz (normalize inner name to gencert)
          for f in bin/gencert-linux-*; do
            [ -f "$f" ] || continue
            arch=$(basename "$f" | sed -E 's/^gencert-linux-(.+)$/\1/')
            rm -f tmp/gencert
            cp "$f" tmp/gencert
            (cd tmp && tar -czf "../dist/gencert-linux-${arch}.tar.gz" gencert)
          done
          # macOS tar.gz (normalize inner name to gencert)
          for f in bin/gencert-macos-*; do
            [ -f "$f" ] || continue
            arch=$(basename "$f" | sed -E 's/^gencert-macos-(.+)$/\1/')
            rm -f tmp/gencert
            cp "$f" tmp/gencert
            (cd tmp && tar -czf "../dist/gencert-macos-${arch}.tar.gz" gencert)
          done
          rm -rf tmp

      - name: List built files
        shell: bash
        run: |
          echo "== bin =="; ls -la bin || true
          echo "== dist =="; ls -la dist || true

      - name: Generate checksums for archives
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum * > sha256sums.txt
          else
            shasum -a 256 * | awk '{print $1, " ", $2}' > sha256sums.txt
          fi

      - name: Rename checksum files to avoid name conflicts
        shell: bash
        run: |
          set -euo pipefail
          if [ -f bin/sha256sums.txt ]; then mv bin/sha256sums.txt bin/sha256sums-binaries.txt; fi
          if [ -f dist/sha256sums.txt ]; then mv dist/sha256sums.txt dist/sha256sums-archives.txt; fi

      - name: Check GPG secrets
        id: gpg
        shell: bash
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [ -n "${GPG_PRIVATE_KEY}" ]; then
            echo "has_gpg=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_gpg=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Import GPG key (optional)
        if: steps.gpg.outputs.has_gpg == 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign checksums (optional)
        if: steps.gpg.outputs.has_gpg == 'true'
        run: |
          cd dist
          if [ -f sha256sums-archives.txt ]; then
            gpg --batch --yes --armor --detach-sign --output sha256sums-archives.txt.asc sha256sums-archives.txt
          else
            echo "No archives checksum to sign"
          fi

      - name: Create/Update release and upload assets (clobber)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          # Ensure release exists
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --generate-notes -t "GenCert $TAG" -n "Automated release for $TAG"
          fi
          shopt -s nullglob
          files=(bin/gencert-* bin/sha256sums-binaries.txt dist/*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No assets found to upload" >&2
            exit 1
          fi
          # Upload with overwrite if exists
          gh release upload "$TAG" "${files[@]}" --clobber
